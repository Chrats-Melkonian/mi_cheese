View(counts_CDS)
View(counts_CDS_unique)
View(counts_genome)
library(ggplot2)
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("DESeq2")
library(ggplot2)
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("DESeq2")
wd <- "/Volumes/patil/Inge/metaT/results/"
#wd <- "/Users/dkinkj/OneDrive_ChrHansen/"
setwd(wd)
# read the genes found in the model created for Ll cremoris CHCC 5614
counts_CDS <- read.csv('counts_prokka_raw_all1_CDS_stranded.tsv', header=TRUE, sep='\t')
counts_CDS_unique <- read.csv('counts_prokka_raw_unique_CDS_stranded.tsv', header=TRUE, sep='\t')
counts_genome <- read.csv('metaT.fullgenome_counts.tsv', header=TRUE, sep='\t')
View(counts_CDS)
View(counts_CDS_unique)
View(counts_CDS)
View(counts_CDS)
library(ggplot2)
# if (!requireNamespace("BiocManager", quietly = TRUE))
#   install.packages("BiocManager")
# BiocManager::install("DESeq2")
library("DESeq2")
# BiocManager::install("apeglm")
library("apeglm")
# BiocManager::install("pheatmap")
library("pheatmap")
# BiocManager::install("vsn")
library("vsn")
# BiocManager::install("hexbin")
library("hexbin")
wd <- "/Volumes/patil/Inge/Milk_ex/results_rAll/"
setwd(wd)
wd <- "/Volumes/patil/Inge/Milk_ex/results_rAll2/"
setwd(wd)
# read the genes found in the model created for Ll cremoris CHCC 5614
counts_CDS <- read.csv('counts_prokka_raw_unique_CDS_stranded.tsv', header=TRUE, sep='\t')
strains <- c('CHCC4895','CHCC5614', 'CHCC6086', 'CHCC10675')
i <- 4
for (s in strains) {
print(s)
All <- sum(counts_CDS[which(str_detect(counts_CDS$X, s)),2])
for (j in seq(1:3)) {
column <- i+j
mapped_noStrain <- sum(counts_CDS[which(str_detect(counts_CDS$X, s)),column])
perc_non_mapped <- mapped_noStrain/All*100
print(perc_non_mapped)
}
i <- i+3
}
library('dplyr')
library('stringr')
strains <- c('CHCC4895','CHCC5614', 'CHCC6086', 'CHCC10675')
i <- 4
for (s in strains) {
print(s)
All <- sum(counts_CDS[which(str_detect(counts_CDS$X, s)),2])
for (j in seq(1:3)) {
column <- i+j
mapped_noStrain <- sum(counts_CDS[which(str_detect(counts_CDS$X, s)),column])
perc_non_mapped <- mapped_noStrain/All*100
print(perc_non_mapped)
}
i <- i+3
}
counts_CDS_all <- read.csv('counts_prokka_raw_all_CDS_stranded.tsv', header=TRUE, sep='\t')
strains <- c('NLANBGKA','CHCC5614', 'CHCC6086', 'CHCC10675')
i <- 4
for (s in strains) {
print(s)
All <- sum(counts_CDS[which(str_detect(counts_CDS$X, s)),2])
for (j in seq(1:3)) {
column <- i+j
mapped_noStrain <- sum(counts_CDS[which(str_detect(counts_CDS$X, s)),column])
perc_non_mapped <- mapped_noStrain/All*100
print(perc_non_mapped)
}
i <- i+3
}
i <- 4
for (s in strains) {
print(s)
All <- sum(counts_CDS_all[which(str_detect(counts_CDS_all$X, s)),2])
for (j in seq(1:3)) {
column <- i+j
mapped_noStrain <- sum(counts_CDS_all[which(str_detect(counts_CDS_all$X, s)),column])
perc_non_mapped <- mapped_noStrain/All*100
print(perc_non_mapped)
}
i <- i+3
}
ibrary(ggplot2)
# if (!requireNamespace("BiocManager", quietly = TRUE))
#   install.packages("BiocManager")
# BiocManager::install("DESeq2")
library("DESeq2")
# BiocManager::install("apeglm")
library("apeglm")
# BiocManager::install("pheatmap")
library("pheatmap")
# BiocManager::install("vsn")
library("vsn")
# BiocManager::install("hexbin")
library("hexbin")
library('dplyr')
library('stringr')
wd <- "/Volumes/patil/Inge/Milk_ex/results_rAll2/"
setwd(wd)
# read the genes found in the model created for Ll cremoris CHCC 5614
counts_CDS <- read.csv('counts_prokka_raw_unique_CDS_stranded.tsv', header=TRUE, sep='\t')
strains <- c('NLANBGKA','CHCC5614', 'CHCC6086', 'CHCC10675')
i <- 4
for (s in strains) {
print(s)
All <- sum(counts_CDS[which(str_detect(counts_CDS$X, s)),2])
for (j in seq(1:3)) {
column <- i+j
mapped_noStrain <- sum(counts_CDS[which(str_detect(counts_CDS$X, s)),column])
perc_non_mapped <- mapped_noStrain/All*100
print(perc_non_mapped)
}
i <- i+3
}
View(counts_CDS)
dim(counts_CDS_all)
# read the genes found in the model created for Ll cremoris CHCC 5614
counts_CDS <- read.csv('counts_prokka_raw_unique_CDS_stranded.tsv', header=TRUE, sep='\t')
library(ggplot2)
# if (!requireNamespace("BiocManager", quietly = TRUE))
#   install.packages("BiocManager")
# BiocManager::install("DESeq2")
library("DESeq2")
# BiocManager::install("apeglm")
library("apeglm")
# BiocManager::install("pheatmap")
library("pheatmap")
# BiocManager::install("vsn")
library("vsn")
# BiocManager::install("hexbin")
library("hexbin")
library('dplyr')
library('stringr')
wd <- "/Volumes/patil/Inge/Milk_ex/results_rAll2/"
setwd(wd)
# read the genes found in the model created for Ll cremoris CHCC 5614
counts_CDS <- read.csv('counts_prokka_raw_unique_CDS_stranded.tsv', header=TRUE, sep='\t')
dim(counts_CDS)
counts_CDS[1,]
counts_CDS[1:62752,]
counts_CDS_unique<- counts_CDS[1:62752,]
View(counts_CDS_unique)
counts_CDS_unique<- counts_CDS[2:62752,]
View(counts_CDS_unique)
for (s in strains) {
print(s)
All <- sum(counts_CDS_unique[which(str_detect(counts_CDS_unique$X, s)),2])
for (j in seq(1:3)) {
column <- i+j
mapped_noStrain <- sum(counts_CDS_unique[which(str_detect(counts_CDS_unique$X, s)),column])
perc_non_mapped <- mapped_noStrain/All*100
print(perc_non_mapped)
}
i <- i+3
}
View(counts_CDS_unique)
sum(counts_CDS_unique[which(str_detect(counts_CDS_unique$X, 's'CHCC10675)),14])
sum(counts_CDS_unique[which(str_detect(counts_CDS_unique$X, 'CHCC10675')),14])
sum(counts_CDS_unique[which(str_detect(counts_CDS_unique$X, 'CHCC10675')),2])
184113/668578
184113/668578*100
strains <- c('NLANBGKA','CHCC5614', 'CHCC6086', 'CHCC10675')
i <- 4
for (s in strains) {
print(s)
All <- sum(counts_CDS_unique[which(str_detect(counts_CDS_unique$X, s)),2])
print(All)
for (j in seq(1:3)) {
column <- i+j
print(column)
mapped_noStrain <- sum(counts_CDS_unique[which(str_detect(counts_CDS_unique$X, s)),column])
print(mapped_noStrain)
perc_non_mapped <- mapped_noStrain/All*100
print(perc_non_mapped)
}
i <- i+3
}
strains <- c('NLANBGKA','CHCC5614', 'CHCC6086', 'CHCC10675')
i <- 4
for (s in strains) {
print(s)
All <- sum(counts_CDS_unique[which(str_detect(counts_CDS_unique$X, s)),2])
#print(All)
for (j in seq(1:3)) {
column <- i+j
#print(column)
mapped_noStrain <- sum(counts_CDS_unique[which(str_detect(counts_CDS_unique$X, s)),column])
#print(mapped_noStrain)
perc_non_mapped <- mapped_noStrain/All*100
print(perc_non_mapped)
}
i <- i+3
}
View(counts_CDS)
strains <- c('NLANBGKA','CHCC5614', 'CHCC6086', 'CHCC10675')
i <- 4
for (s in strains) {
print(s)
All <- sum(counts_CDS[which(str_detect(counts_CDS$X, s)),2])
#print(All)
for (j in seq(1:3)) {
column <- i+j
#print(column)
mapped_noStrain <- sum(counts_CDS[which(str_detect(counts_CDS$X, s)),column])
#print(mapped_noStrain)
perc_non_mapped <- mapped_noStrain/All*100
print(perc_non_mapped)
}
i <- i+3
}
View(counts_CDS)
View(counts_CDS_unique)
View(counts_CDS)
View(counts_CDS)
strains <- c('CHCC10675')
i <- 13
for (s in strains) {
print(s)
All <- sum(counts_CDS_unique[which(str_detect(counts_CDS_unique$X, s)),2])
print(All)
for (j in seq(1:3)) {
column <- i+j
print(column)
mapped_noStrain <- sum(counts_CDS_unique[which(str_detect(counts_CDS_unique$X, s)),column])
print(mapped_noStrain)
perc_non_mapped <- mapped_noStrain/All*100
print(perc_non_mapped)
}
i <- i+3
}
strains <- c('CHCC10675')
i <- 13
for (s in strains) {
print(s)
All <- sum(counts_CDS[which(str_detect(counts_CDS$X, s)),2])
#print(All)
for (j in seq(1:3)) {
column <- i+j
#print(column)
mapped_noStrain <- sum(counts_CDS[which(str_detect(counts_CDS$X, s)),column])
#print(mapped_noStrain)
perc_non_mapped <- mapped_noStrain/All*100
print(perc_non_mapped)
}
i <- i+3
}
strains <- c('CHCC10675')
i <- 13
for (s in strains) {
print(s)
All <- sum(counts_CDS[which(str_detect(counts_CDS$X, s)),2])
print(All)
for (j in seq(1:3)) {
column <- i+j
print(column)
mapped_noStrain <- sum(counts_CDS[which(str_detect(counts_CDS$X, s)),column])
print(mapped_noStrain)
perc_non_mapped <- mapped_noStrain/All*100
print(perc_non_mapped)
}
i <- i+3
}
View(counts_CDS)
sum(counts_CDS_unique$HTTFFBGXC_1A_19s004141.1.1_Blasche_lane119s004141)
counts_CDS$HTTFFBGXC_1A_19s004141.1.1_Blasche_lane119s004141[1]
5693765/(5693765+643550)
unique_reads <- sum(counts_CDS_unique$HTTFFBGXC_1A_19s004141.1.1_Blasche_lane119s004141)
non_unique <- counts_CDS$HTTFFBGXC_1A_19s004141.1.1_Blasche_lane119s004141[1]
all_reads <- unique_reads+non_unique
all_reads
unique_reads <- sum(counts_CDS_unique$HTTFFBGXC_1B_19s004142.1.1_Blasche_lane119s004142)
non_unique <- counts_CDS$HTTFFBGXC_1B_19s004142.1.1_Blasche_lane119s004142[1]
all_reads <- unique_reads+non_unique
all_reads
unique_reads/all_reads
View(counts_CDS)
wd <- "/Users/dkinkj/OneDrive - Chr Hansen/InKj/Analysis/metaT/NGLess"
setwd(wd)
over_counta <-read.table(file = 'Output_r4_overview_Counts', sep = '\t', header = TRUE)
over_counta <-read.table(file = 'Output_r4_overview_Counts.csv', sep = '\t', header = TRUE)
View(over_counta)
over_counta <-read.table(file = 'Output_r4_overview_Counts.csv', sep = '\\t', header = TRUE)
over_counta <-read.table(file = 'Output_r4_overview_Counts.csv', sep = ';', header = TRUE)
View(over_counta)
over_counta$per_uniq <- over_counta$Paired_Unique_reads/over_counta$mapped_paired*100
View(over_counta)
wd <- "/Users/dkinkj/OneDrive - Chr Hansen/InKj/Analysis/metaT"
setwd(wd)
over_r4_counta <-read.table(file = './NGLess/Output_r4_overview_Counts.csv', sep = ';', header = TRUE)
over__pan_counta <-read.table(file = './Pan_metaT/Output_overview_pan_Counts.csv', sep = ';', header = TRUE)
over_pan_counta <-read.table(file = './Pan_metaT/Output_overview_pan_Counts.csv', sep = ';', header = TRUE)
wd <- "/Users/dkinkj/OneDrive - Chr Hansen/InKj/Analysis/metaT"
setwd(wd)
over_r4_counta <-read.table(file = './NGLess/Output_r4_overview_Counts.csv', sep = ';', header = TRUE)
over_pan_counta <-read.table(file = './Pan_metaT/Output_overview_pan_Counts.csv', sep = ';', header = TRUE)
over_r4_counta$per_uniq <- over_r4_counta$Paired_Unique_reads/over_r4_counta$mapped_paired*100
over_pan_counta$per_uniq <- over_pan_counta$Paired_Unique_reads/over_pan_counta$mapped_paired*100
View(over_pan_counta)
View(over_r4_counta)
library(ggplot2)
# if (!requireNamespace("BiocManager", quietly = TRUE))
#   install.packages("BiocManager")
# BiocManager::install("DESeq2")
library("DESeq2")
# BiocManager::install("apeglm")
library("apeglm")
# BiocManager::install("pheatmap")
library("pheatmap")
# BiocManager::install("vsn")
library("vsn")
# BiocManager::install("hexbin")
library("hexbin")
library('dplyr')
library('stringr')
wd <- "/Volumes/patil/Inge/Milk_ex/results_rAll4/"
setwd(wd)
wd <- "/Volumes/patil/Inge/Milk_ex/results_rAll4/"
setwd(wd)
d
#wd <- "/Volumes/patil/Inge/Milk_ex/results_rAll4/"
wd <- "/Volumes/Instinct/Departments/20010/dkinkj/metaT/results_rAll4"
setwd(wd)
# read the genes found in the model created for Ll cremoris CHCC 5614
counts_CDS <- read.csv('counts_prokka_raw_unique_CDS_stranded.tsv', header=TRUE, sep='\t')
counts_COG <- read.csv('counts_prokka_raw_unique_COG_stranded.tsv', header=TRUE, sep='\t')
counts_EC <- read.csv('counts_prokka_raw_unique_EC_stranded.tsv', header=TRUE, sep='\t')
View(counts_CDS)
library(ggplot2)
# if (!requireNamespace("BiocManager", quietly = TRUE))
#   install.packages("BiocManager")
# BiocManager::install("DESeq2")
library("DESeq2")
# BiocManager::install("apeglm")
library("apeglm")
# BiocManager::install("pheatmap")
library("pheatmap")
# BiocManager::install("vsn")
library("vsn")
# BiocManager::install("hexbin")
library("hexbin")
library('dplyr')
library('stringr')
wd <- "/Volumes/Instinct/Departments/20010/dkinkj/metaT/"
setwd(wd)
# read the genes found in the model created for Ll cremoris CHCC 5614
counts_CDS_r2 <- read.csv('./results_rAll2/counts_prokka_raw_unique_CDS_stranded.tsv', header=TRUE, sep='\t')
counts_CDS_r4 <- read.csv('./results_rAll4/counts_prokka_raw_unique_CDS_stranded.tsv', header=TRUE, sep='\t')
View(counts_CDS_r2)
View(counts_CDS_r4)
View(counts_CDS_r2)
View(counts_CDS_r4)
View(over_r4_counta)
View(over_pan_counta)
View(over_r4_counta)
R --version
which R
which r
version
version
version
system("type R")
library(devtools)
library(DESeq2)
library(SARTools)
################################################################################
### R script to compare several conditions with the SARTools and DESeq2 packages
### Hugo Varet
### April 20th, 2015
### designed to be executed with SARTools 1.1.0
################################################################################
################################################################################
###                parameters: to be modified by the user                    ###
################################################################################
rm(list=ls())                                        # remove all the objects from the R session
workDir <- "/Users/dkinkj/OneDrive - Chr Hansen/InKj/Analysis/metaT/Diff_Expression_OG_3core"      # working directory for the R session
projectName <- "FoodTrans_metaT_milk_OG_3core"                         # name of the project
author <- "InKj"                                # author of the statistical analysis/report
targetFile <- "target.txt"                           # path to the design/target file
rawDir <- "OG_count_samples_core"                                      # path to the directory containing raw counts files
featuresToRemove <- c("alignment_not_unique",        # names of the features to be removed
"ambiguous", "no_feature",     # (specific HTSeq-count information and rRNA for example)
"not_aligned", "too_low_aQual")
varInt <- "condition"                                    # factor of interest
condRef <- "All"                                      # reference biological condition
batch <- NULL                                        # blocking factor: NULL (default) or "batch" for example
fitType <- "parametric"                              # mean-variance relationship: "parametric" (default) or "local"
cooksCutoff <- TRUE                                # TRUE/FALSE to perform the outliers detection (default is TRUE)
independentFiltering <- TRUE                         # TRUE/FALSE to perform independent filtering (default is TRUE)
alpha <- 0.01                                        # threshold of statistical significance
pAdjustMethod <- "BH"                                # p-value adjustment method: "BH" (default) or "BY"
typeTrans <- "VST"                                   # transformation for PCA/clustering: "VST" or "rlog"
locfunc <- "median"                                  # "median" (default) or "shorth" to estimate the size factors
#colors <- c("cornflowerblue","blue", "lightcoral","red3", "palegreen3", "forestgreen", "orangered", "orangered4")              # vector of colors of each biological condition on the plots
library(RColorBrewer)
colors <- colorRampPalette(brewer.pal(10, "Paired")) (6)
colors <- c("#8B535D", "#BE939B", "#456C6F", "#85B0B3", "#B08B53", "#DAC19B", "#59596E", "#9898AC", "#245776", "#5BA2CD")
################################################################################
###                             running script                               ###
################################################################################
setwd(workDir)
# checking parameters
checkParameters.DESeq2(projectName=projectName,author=author,targetFile=targetFile,
rawDir=rawDir,featuresToRemove=featuresToRemove,varInt=varInt,
condRef=condRef,batch=batch,fitType=fitType,cooksCutoff=cooksCutoff,
independentFiltering=independentFiltering,alpha=alpha,pAdjustMethod=pAdjustMethod,
typeTrans=typeTrans,locfunc=locfunc,colors=colors)
# loading target file
target <- loadTargetFile(targetFile=targetFile, varInt=varInt, condRef=condRef, batch=batch)
# loading target file
target <- loadTargetFile(targetFile=targetFile, varInt=varInt, condRef=condRef, batch=batch)
# loading counts
counts <- loadCountData(target=target, rawDir=rawDir, skip='1')
# description plots
majSequences <- descriptionPlots(counts=counts, group=target[,varInt], col=colors)
# analysis with DESeq2
out.DESeq2 <- run.DESeq2(counts=counts, target=target, varInt=varInt, batch=batch,
locfunc=locfunc, fitType=fitType, pAdjustMethod=pAdjustMethod,
cooksCutoff=cooksCutoff, independentFiltering=independentFiltering, alpha=alpha)
# PCA + clustering
exploreCounts(object=out.DESeq2$dds, group=target[,varInt], typeTrans=typeTrans, col=colors)
# summary of the analysis (boxplots, dispersions, diag size factors, export table, nDiffTotal, histograms, MA plot)
summaryResults <- summarizeResults.DESeq2(out.DESeq2, group=target[,varInt], col=colors,
independentFiltering=independentFiltering,
cooksCutoff=cooksCutoff, alpha=alpha)
# save image of the R session
save.image(file=paste0(projectName, ".RData"))
# generating HTML report
writeReport.DESeq2(target=target, counts=counts, out.DESeq2=out.DESeq2, summaryResults=summaryResults,
majSequences=majSequences, workDir=workDir, projectName=projectName, author=author,
targetFile=targetFile, rawDir=rawDir, featuresToRemove=featuresToRemove, varInt=varInt,
condRef=condRef, batch=batch, fitType=fitType, cooksCutoff=cooksCutoff,
independentFiltering=independentFiltering, alpha=alpha, pAdjustMethod=pAdjustMethod,
typeTrans=typeTrans, locfunc=locfunc, colors=colors)
View(counts)
library(devtools)
library(DESeq2)
library(devtools)
library(DESeq2)
library(SARTools)
################################################################################
###                parameters: to be modified by the user                    ###
################################################################################
rm(list=ls())                                        # remove all the objects from the R session
workDir <- "/Users/dkinkj/OneDrive - Chr Hansen/InKj/Analysis/metaT/Diff_Expression_OG_3core"      # working directory for the R session
projectName <- "FoodTrans_metaT_milk_OG_3core"                         # name of the project
author <- "InKj"                                # author of the statistical analysis/report
targetFile <- "target.txt"                           # path to the design/target file
rawDir <- "OG_count_samples_core"                                      # path to the directory containing raw counts files
featuresToRemove <- c("alignment_not_unique",        # names of the features to be removed
"ambiguous", "no_feature",     # (specific HTSeq-count information and rRNA for example)
"not_aligned", "too_low_aQual")
varInt <- "condition"                                    # factor of interest
condRef <- "All"                                      # reference biological condition
batch <- NULL                                        # blocking factor: NULL (default) or "batch" for example
fitType <- "parametric"                              # mean-variance relationship: "parametric" (default) or "local"
cooksCutoff <- TRUE                                # TRUE/FALSE to perform the outliers detection (default is TRUE)
independentFiltering <- TRUE                         # TRUE/FALSE to perform independent filtering (default is TRUE)
alpha <- 0.01                                        # threshold of statistical significance
pAdjustMethod <- "BH"                                # p-value adjustment method: "BH" (default) or "BY"
typeTrans <- "VST"                                   # transformation for PCA/clustering: "VST" or "rlog"
locfunc <- "median"                                  # "median" (default) or "shorth" to estimate the size factors
library(RColorBrewer)
colors <- colorRampPalette(brewer.pal(10, "Paired")) (6)
colors <- c("#8B535D", "#BE939B", "#456C6F", "#85B0B3", "#B08B53", "#DAC19B", "#59596E", "#9898AC", "#245776", "#5BA2CD")
################################################################################
###                             running script                               ###
################################################################################
setwd(workDir)
# checking parameters
checkParameters.DESeq2(projectName=projectName,author=author,targetFile=targetFile,
rawDir=rawDir,featuresToRemove=featuresToRemove,varInt=varInt,
condRef=condRef,batch=batch,fitType=fitType,cooksCutoff=cooksCutoff,
independentFiltering=independentFiltering,alpha=alpha,pAdjustMethod=pAdjustMethod,
typeTrans=typeTrans,locfunc=locfunc,colors=colors)
# loading target file
target <- loadTargetFile(targetFile=targetFile, varInt=varInt, condRef=condRef, batch=batch)
# loading counts
counts <- loadCountData(target=target, rawDir=rawDir, skip='1')
# description plots
majSequences <- descriptionPlots(counts=counts, group=target[,varInt], col=colors)
# analysis with DESeq2
out.DESeq2 <- run.DESeq2(counts=counts, target=target, varInt=varInt, batch=batch,
locfunc=locfunc, fitType=fitType, pAdjustMethod=pAdjustMethod,
cooksCutoff=cooksCutoff, independentFiltering=independentFiltering, alpha=alpha)
# PCA + clustering
exploreCounts(object=out.DESeq2$dds, group=target[,varInt], typeTrans=typeTrans, col=colors)
# summary of the analysis (boxplots, dispersions, diag size factors, export table, nDiffTotal, histograms, MA plot)
summaryResults <- summarizeResults.DESeq2(out.DESeq2, group=target[,varInt], col=colors,
independentFiltering=independentFiltering,
cooksCutoff=cooksCutoff, alpha=alpha)
# save image of the R session
save.image(file=paste0(projectName, ".RData"))
# generating HTML report
writeReport.DESeq2(target=target, counts=counts, out.DESeq2=out.DESeq2, summaryResults=summaryResults,
majSequences=majSequences, workDir=workDir, projectName=projectName, author=author,
targetFile=targetFile, rawDir=rawDir, featuresToRemove=featuresToRemove, varInt=varInt,
condRef=condRef, batch=batch, fitType=fitType, cooksCutoff=cooksCutoff,
independentFiltering=independentFiltering, alpha=alpha, pAdjustMethod=pAdjustMethod,
typeTrans=typeTrans, locfunc=locfunc, colors=colors)
